1. Process and thread:
• process: an executing program including program code (.text section), resources like open files, pending signals, internal kernal data, processor state, a memory address space with one or more memory mappings, one or more threads of control, and a .data section.
• thread: a unique program counter, thread stack, and a set of registers.
The kernel schedules individual threads, not processes. And to linux, a thread is just a special kind of process.
Processes provides two virtualizations: a virtualized processor and virtual memory.

2. Process descriptor and the task structure:
Kernel maintains a list of processes in a circular doubly linked list. struct task_struct is defined in <linux/sched.h>; the process descriptor contains all the information about a specific process.
The task_struct structure is allocated via the slab allocator. Prior to the 2.6 kernel series, task_struct is stored at the end of the kernel stack of each process. (This allows architecture with few registers like x86 to fetch task_struct via stack pointer directly). But with the task_struct dynamically allocated via slab allocator, a new structure (struct thread_info) is at the bottom of the kernel stack. thread_info is defined in <asm/thread_info.h>. struct thread_info has one entry (pointer to the task's actual task_struct).

3. Storing the process descriptor:
linux provides a macro "current" to fetch the pointer to the current running process's task_struct, this macro must be independently implemented by each architecture. 

4. Process state:

                        Scheduler dispatches task to run;
                        schedule() calls context_switch().
Task forks                    -----------------
   |                         /                 \                           ---->  Task is terminated
   |                        /                   \                          |
   |	     --------------                      -> --------------         | do_exit()
   |        | TASK_RUNNING |                      | TASK_RUNNING |         |
    ------> |(ready but not|                      |              | --------
            |   running)   |                      |   (running)  |
             -------------- <-                     --------------
                     ^        \                  /           |
                     |         \                /            |
                     |          ----------------             | 
                     |        (Task is preempted)            |
                     |                                       |
(Event occurs and    |                                       | (Task sleeps on wait queue for a specific event)
 task is woken up    |                                       |
 and placed back on  |       ---------------------           |
 the run queue)      |      |  TASK_INTERRUTIBLE  |          |
                     ------ |          or         |  <--------
                            | TASK_UNINTERRUTIBLE |
                             ---------------------

• TASK_RUNNING: the process is runnable, it's either currently running or on a runnable queue waiting to run. (This is the only possible state for a process executing in user-space; it can also apply to a process in kernel-space that is actively running.)
• TASK_INTERRUPTIBLE: the process is sleeping, waiting for some condition to exist. When this condition exists, the kernel sets the process's state to TASK_RUNNING. The process also awakes prematurely and becomes runnable if receives a signal.
• TASK_UNINTERRUPTIBLE: this state is identical to TASK_INTERRUPTIBLE except that it doesn't wake up and become runnable if it receives a signal.
• __TASK_TRACED: the process is being traced by another process, such as a debugger, via ptrace.
• __TASK_STOPPED: process execution has stopped; the task is neither running nor is it eligible to run. This happens if the task receives the SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU signal, or if it receives any signal while it is being debugged (This "or" sentence may not be correct, see ULK chapter 03 for more details.).

5. Process context:
System calls and exception handlers are well-defined interfaces into the kernel. A process can begin executing in kernel space only through one of these interfaces, all access to the kernel is through these interfaces. And the "current" macro is valid only when the kernel is in the process context.

6. The process family tree:
It's expensive to iterate over every task in a system with many processes; code should have good reason (and no alternative) before doing so.

7. Process creation:
The fork syscall creates a child process that is a copy of current process, it differs from the parent only in pid, ppid, and certain resources and statistics, such as pending signals, which are not inherited.
• Copy-On-Write:
Using COW, the only overhead incurred by fork() is the duplication of its parent's page tables(because child and parent share a single address space, so child's page table must be the same with its parent's.) and the creation of a unique process descriptor of the child.
• The fork, vfork, and __clone all invoke the clone() system call with requisite flags. The clone() syscall, in turn, calls do_fork(). Deliberately, the kernel intends to run child first(although this is not function correctly.) Because in the common case of the child simply calling exec() immediately, this eliminates any COW overhead that would occur if the parent ran first and began writing to the address space.
• vfork:
The vfork syscall has the same effect as fork, except that the page table entries of the parent process are not copied. Instead the child executes as the sole thread in the parent's address space, and parent is blocked until the child either calls exec() or exits.

8. Linux implementation of threads:
Linux treats all threads as standard processes. Each thread has a unique task_struct and appears to the kernel as a normal process, threads just happen to share resources, such as address space with other processes.
• Creating threads:
clone(CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SIGHAND, 0);
The above line is identical to a normal fork(), except that the address space, file system resources, file descriptors, and signal handlers are shared. In other words, the new task and its parent are what are popularly called threads.
Instead, a normal fork() could be implemented as: clone(SIGCHLD, 0);
and vfork() is implemented as: clone(CLONE_VFORK | CLONE_VM | SIGCHLD, 0);
see more about clone()'s flags.

• Kernel threads:
Kernel threads are the processes that exist only in kernel space. The significant difference between kernel threads and normal processes is that kernel threads do not have a process address space. (kernel threads' mm pointer is NULL (which points to their address space.)). Kernel threads operate only in kernel space and do not context to user-space. But kernel threads are scheduable and preemptable, the same as normal processes (process context). Kernel threads are created on system boot by other kernel threads. in header file <linux/kthread.h>, kthread_create() spawns a new kernel thread from an existing one.

9. Process termination:
After do_exit() is called, the only memory it occupies is its kernel stack, the thread_info struct, and the task_struct structure. The task exists solely to provide information to its parent.
• Removing the process descriptor:
After the do_exit() completes, the process descriptor still exists, but the process is a zombie and unable to run. When it is time to finally deallocate the process the process descriptor, release_task() is invoked.
• Parentless task:
If the parent exits before its children, then to reparent that task's children on its exit, to either another process in the current thread group, or if that fails, to the init process.
