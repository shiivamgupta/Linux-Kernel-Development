• In this chapter, we discuss 4 components related to device drivers and device management:
i)   Device types: Classifications used in all Unix systems to unify behavior of common devices.
ii)  Modules: The mechanism by which the Linux kernel can load and unload object code on demand.
iii) Kernel objects: Support for adding simple object-oriented behavior and a parent/child relationship to kernel data structures.
iv)  Sysfs: A filesystem representation of the system's device tree.

1. Device types:
• Block devices:
Abbreviated as blkdevs, block devices are addressable in device-specified chunks called blocks and generally support seeking, the random access of data. Block devices are accessed via a special file called a block device node and generally mounted as a filesystem.
• Character devices:
Abbreviated as cdevs, character devices are generally not addressable, providing access to data only as a stream, generally of characters(bytes). Example cdevs include keyboards, mice, printers, and most pseudo-devices. cdevs are accessed via a special file called a character device node. Unlike with block devices, applications interact with cdevs directly through their device node.
• Network devices:
Network devices provide access to a network via a physical adapter and a specific protocol. Breaking Unix's "everything is a file" design principle, network devices are not accessed via a device node but with a special interface called the socket API.

Not all device drivers represent physical devices. Some device drivers are virtual, providing access to kernel functionality. We call these pseudo devices. For example, the kernel random number generator (accessed at /dev/random), the null device (accessible at /dev/null), the zero device (accessible at /dev/zero), the full device (/dev/full), the memory device (/dev/mem).

2. Modules:
The Linux kernel is modular, supporting the dynamic insertion and removal of code from itself at runtime. Related subroutines, data, and entry and exit points are grouped together in a single binary image, a loadable kernel object, called a module.
• A hello_world:
===============================================================
/* hello.c - The Hello, world! kernel module */
#include <linux/init.h>
#include <linux/module.h>
#include <linux/kernel.h>

/* the init function called when the module is loaded. */
static int hello_init(void)
{
	printk(KERN_ALERT "I bear a charmed life.\n");
	return 0;
}

/* the exit function called when the module is removed. */
static void hello_exit(void)
{
	printk(KERN_ALERT "Out, out, brief candle!\n");
}

module_init(hello_init);
module_exit(hello_exit);

MODULE_LICANSE("GPL");
MODULE_AUTHOR("Shakespeare");
MODULE_DESCRIPTION("A hello world module");
===============================================================
• All init functions must have the form: 
int my_init(void);
Because init functions are typically not directly invoked by external code, so it often can be marked as static. If this file were compiled statically into the kernel image, the init function would be stored in the kernel image and run on kernel boot.
• Exit functions must have the form:
void my_exit(void);
As with the init function, you probably want to mark it static. If the file were compiled into the static kernel image, the exit function would NOT be included, and it would never be invoked because if it were not a module, the code could never be removed from memory.
• The MODULE_LICENSE() macro specifies the copyright license for this file. Loading a non-GPL module into memory results in the tainted flag being set in the kernel. Second, non-GPL modules cannot invoke GPL-only symbols.

• Note that module_init() and module_exit() are two macros defined in <linux/init.h>:
=====================================================================
#define module_init(initfn)					\
		static inline initcall_t __inittest(void)		\  // line 1.1
	{ return initfn; }					\                  // line 1.2
	int init_module(void) __attribute__((alias(#initfn))); // line 2

#define module_exit(exitfn)					\
		static inline exitcall_t __exittest(void)		\
	{ return exitfn; }					\
	void cleanup_module(void) __attribute__((alias(#exitfn)));
=====================================================================
Note that line 1.1~1.2 is to check the function prototype. If you've ready defined init_module() function and cleanup_module() function (They must have this exact function name!), then there's no need to use module_init() and module_exit(). 

• Building modules:
(I)  Living in the source tree:
Ideally your module is an official part of Linux and thus lives in the kernel source tree.
i)   For example, let's assume you have a character device and want to store it in drivers/char/. Drivers with only one or two source files might simply stick their source in this directory. Drivers with multiple source files or other accompanying data might create a new subdirectory. For example, you want to create a fishing/ subdirectory inside drivers/char/.
ii)  Next, you need to add a line to the Makefile in drivers/char/. Add a line:
obj-m += fishing/
Most likely, if your driver's complication is contingent on a specific configuration option, you would instead add the line:
obj-$(CONFIG_FISHING_POLE) += fishing/
iii) Finally, inside drivers/char/fishing/, you would add a new Makefile with the following line: 
obj-m += fishing.o
The build system now descends into fishing/ and builds the module named fishing.ko from fishing.c. (Note that you write the extension .o but the module is compiled as .ko). As before, most likely your fishing pole driver's compilation is conditional on a configuration option, so you would instead do the following:
obj-$(CONFIG_FISHING_POLE) += fishing.o
If the fishing pole driver gets complicated that it must span multiple files, then the Makefile could be written as follows:
===================================================
obj-$(CONFIG_FISHING_POLE) += fishing.o
fishing-objs  :=  fishing-main.o  fishing-line.o
===================================================
Now fishing-main.c and fishing-line.c will be compiled and linked into fishing.ko when CONFIG_FISHING_POLE is set.
Finally, you might need to pass additional compile flags solely for your file. To do so, simply add a line in the Makefile:
EXTRA_CFLAGS += -DTITANIUM_POLE

• If you opted to place your source files in drivers/char/ and not create a new subdirectory, you would merely place the above (that in the drivers/char/fishing/Makefile) into drivers/char/Makefile.

(II) Living externally:
If you prefer to maintain and build your module outside the kernel source tree, simply create a Makefile in your own source directory with:
obj-m := fishing.o
This line compiles fishing.c into fishing.ko. Or if it spans multiple files:
obj-m := fishing.o
fishing-objs  :=  fishing-main.o  fishing-line.o
This compiles fishing-main.c and fishing-line.c into fishing.ko.
Because the module lives outside the kernel tree, you need to instruct make to find the kernel source files and base Makefile:
	make -C "kernel_source_location" SUBDIRS=$PWD modules
"kernel_source_location" is the location of your configured kernel source tree.

• Installing modules:
Compiled modules are installed into lib/modules/version/kernel/ where each directory under kernel/ corresponds to the module's location in the kernel source tree. For example, with a kernel version of 2.6.34, then the compiled fishing pole module would live at lib/modules/2.6.34/kernel/drivers/char/fishing.ko.
The following build command is used to install compiled modules into the correct location:
	make modules_install
This needs to be run as root.

• Generating module dependencies:
For example, if module foo depends on module bar, when you load foo module, the module loader automatically loads the bar module. This dependency information must be generated. To build the module dependency information , simply run as the root:
	depmod
To perform a quick update, rebuilding only the information for mudules newer than the dependency information, run as root:
	depmod -A
The module dependency information is stored in the file: lib/modules/version/modules.dep.

• Loading modules:
i)  The simplest way to load a module is via insmod. It doesn't perform any dependency resolution or advanced error checking. Usage:
	insmod module.ko
To remove a module, use the rmmod utility. As root, run the following, where module is the name of an already-loaded module:
	rmmod module
ii) The utility modprobe provides dependency resolution, error checking and reporting, configurable behavior, and more advanced features; its use is highly encouraged. To insert a module into the kernel via modprobe, run as root:
	modprobe module [module parameters]
The modprobe utility not only loads the requested module, but also any modules on which it depends.
To remove modules from the kernel, run as root:
	modprobe -r modules
Here, modules specifies one or more modules to remove, it also removes any modules on which the given module depends, if they are unused.

• Managing configuration options:
Thanks to the new kbuild system in the 2.6 kernel, adding new configuration options is easy. All you have to do is to add an entry to the Kconfig file responsible for the application branch of the kernel source tree. For example, if the fishing pole driver lives in drivers/char/, just use drivers/char/Kconfig. If you create a new subdirectory and want a new Kconfig file to live there, you need to source it from an existing Kconfig. In the existing Kconfig, add a line:
	source "drivers/char/fishing/Kconfig"
The new Kconfig file is easy to fill in, for example:
==========================================
config FISHING_POLE
	tristate "Fish Master 3000 support"
	default n
	help
		If you say Y.....
		.....
		
		If unsure, say N.
==========================================
The first line defines what configuration option this entry represents. Note that the prefix "CONFIG_" is assumed and not written.
The second line states that this option is a tristate, Y(build into kernel)/N(not build at all)/M(build as a module).
The third line specifies the default for this option.
The help directive signifies that the rest indented is the help text for this entry.
There are other options:
* The "depends" directive specifies options that must be set before this option can be set. If the dependencies are not met, the option is disabled. For example, if you add :
	depends on FISH_TANK
in the Kconfig entry, the device driver couldn't be enabled(Y/M) until the CONFIG_FISH_TANK option is enabled.
* The "select" directive is like depends, except that it forces the given option if our option is selected. (This option shouldn't be used as frequently as depends because it automatically enables other configuration options). For example:
	select BAIT
This enables CONFIG_BAIT whenever CONFIG_FISHING_POLE is enabled.
* For both depends and select directive, you can use "&&" to request multiple options. You can also specify that an option not be enabled by the prefixing the option with an exclamation("!") mark. For example:
	depends on EXAMPLE_DRIVERS && !NO_FISHING_ALLOWED
This line specifies that the driver depends on CONFIG_EXAMPLE_DRIVERS being set and CONFIG_NO_FISHING_ALLOWED being unset.
* The tristate and bool options can be followed by the if directive, which marks the entire option conditional on another configuration option. If the condition is not met, the configuration option is not only disabled, but also doesn't appear in the configuration utility. For example:
	bool "Deep Sea Mode" if OCEAN
This line instructs the configuration system to display an option only if CONFIG_OCEAN is set.
The if directive can also follow the default directive, enforcing the default only if the condition is met.
* The configuration system exports several meta-options to help make configuration easier.
CONFIG_EMBEDDED: enabled only if the users specified that they want to see options designed for disabling key features (presumably to save precious memory on embedded systems).
CONFIG_BROKEN_ON_SMP: used to specify a driver that is not SMP-safe. Normally this flag is unset, and new drivers should use this flag.
CONFIG_DEBUG_KERNEL: enables the selection of debugging-related options.
CONFIG_EXPERIMENTAL: used to flag options that are experimental or beta quality.

• Module parameters:
Linux kernel provides a simple framework, enabling drivers to declare parameters that the user can specify either on boot or module load and then have these parameter exposed in your driver as global variables. These module parameters also show up in sysfs.
* Defining a module parameter is done via the macro module_param():
	module_param(name, type, perm);
The name is both the parameter exposed to the user and the variable holding the parameter inside your module.
The type holds the parameter's data type, which is one of byte, short, ushort, int, uint, long, ulong, charp, bool, or invbool. charp is a pointer to a char; invbool is a boolean whose value is inverted from the what the user specifies. The byte type is stored in a char, a bool type is stored in variables of type int.
The perm specifies the permissions of the corresponding file in sysfs. The permissions can be specified in the usual octal format, like 0644, or by ORing together the usual SIfoo flags, like S_IRUSR | S_IWUSR. 
The macro doesn't declare the inside variable for you, you must do that BEFORE using the macro. Usage:
	static int allow_live_bait = 1;
	module_param(allow_live_bait, bool, 0664);
It's also possible to have the internal variable named differently than the external parameter:
	module_param_named(name, variable, type, perm);
The name is the externally viewable parameter name, and variable is the name of the internal global variable.
Normally you would use a type of charp to define a module parameter that takes a string. The kernel copies the string provided by the user into memory and points your variable to the string. Like:
	static char* name;
	module_param(name, charp, 0);  // if perm == 0, then it disables a sysfs entry.
It's also possible to have the kernel copy the string directly into a character array that you supply:
	module_param_string(name, string, len, perm);
The name is the external parameter name, string is the internal variable name, len is the size of the buffer named by string, perm is the sysfs permission (or 0 to disable a sysfs altogether). For example:
	static char species[BUF_LEN];
	module_param_string(specifies, species, BUF_LEN, 0);
You can accept a comma-serarated list of parameters stored in a C array:
	module_param_array(name, type, nump, perm);
The name is again the external parameter and internal variable name, type is the data type, and perm is the sysfs permissions. nump - is a pointer to an integer in which the kernel stores the number of entries stored into the array. Note that the array pointed to by name must be statically allocated. (The kernel determines the array's size at compile-time to ensure that it doesn't overrun). For example:
	static int fish[MAX_FISH];
	static int nr_fish;
	module_param_array(fish, int, &nr_fish, 0444);
You can also name the internal array with a different name with the external paramater:
	module_param_array_named(name, array, type, nump, perm);
Finally, you can document your parameters by using MODULE_PARM_DESC():
	static unsigned short size = 1;
	module_param(size, ushort, 0644);
	MODULE_PARM_DESC(size, "The size in inches of the fishing pole.");
All these macros require the inclusion of  <linux/module.h>.

• Exported symbols:
When modules are loaded, they are dynamically linked into the kernel. As with user-space, dynamically linked binaries can call only external functions that are explicitly exported for use. This is handled via special directives called EXPORT_SYMBOL() and EXPORT_SYMBOL_GPL().
Exported functions are available for use by modules, functions not exported cannot be invoked from modules. (Exported symbols must be nonstatic.) The set of exported kernel symbols are known as the exported kernel interfaces.
Some developers want their interfaces accessible to only GPL-compliant modules. The kernel linker enforces this restriction through use of the MODULE_LICENSE(). If you want the function accessible to only modules that labeled as GPL-licensed, use instead:
	EXPORT_SYMBOL_GPL(func_name);

3. The device model:
The device model provides a single mechanism for representing devices and describing their topology in the system. The initial motivation for the device model was to provide an accurate device tree to faciliate power management.
i)   Kobjects:
At the heart of the device model is the kobject, which is defined in <linux/kobject.h>, as struct kobject. The kobject is similar to the Object class in java, it provides basic facilities like refcnt, name, parent pointer, etc.
=============================================================
struct kobject{
	const char* name;        /* name of this kobject */
	struct list_head entry;  /* */
	struct kobject* parent;  /* points to this kobject's parent,this forms sysfs - a user-space filesystem representation of the kobject object hierarchy inside the kernel */
	struct kset* kset;
	struct kobj_type* ktype; 
	struct sysfs_dirent* sd; /* points to sysfs_dirent, which represents this kobject in sysfs */
	struct kref kref;
	unsigned int state_initializedi : 1;
	unsigned int state_in_sysfs : 1;
	unsigned int state_add_uevent_sent : 1;
	unsigned int state_remove_uevent_sent : 1;
	unsigned int uevent_suppress : 1;
};
=============================================================
Kobjects are usually embedded in other strutures and are generally not interesting on their own. When kobjects are embedded inside other structures, the structures receive the standardized functions that a kobject provides.

ii)  Ktypes:
kobjects are associated with a specific type, called a ktype, defined in <linux/kobject.h>:
=============================================================
struct kobj_type{
	void (*release)(struct kobject*);   /* points to a destructor called when a kobject's refcnt reaches 0. Used to free any memory associated with this kobject and other cleaning up */
	const struct sysfs_ops* sysfs_ops;  /* points to sysfs_ops structure, describes the behavior of sysfs files on read and write. Discussed in more detail in sysfs section */
	struct attribute** default_attrs;   /* points to an array of attribute structures. These structures define the default attributes associated with this kobject. If this kobject is exported to sysfs, the attributes are exported as files. Note that the last entry in the array must be NULL. */
};
=============================================================

iii) Ksets:
Ksets are collections of kobjects. ksets work as the base container for a set of kobjects, collecting related kobjects, such as "all block devices". 
Ksets group related kernel objects together, whereas ktypes enable kernel objects (functionally related or not) to share common operations. The distinction is kept to allow kobjects of identical ktypes to be grouped into different ksets. That is, there're only a handful of ktypes, but many ksets in the kernel.
Defined in <linux/kobject.h>:
=============================================================
struct kset{
	struct list_head list;               /* list is a linked list of all kobjects in this kset */
	spinlock_t list_lock;                /* spin lock protects this entry in the list */
	struct kobject kobj;
	struct kset_uevent_ops* uevent_ops;  /* points to a structure that describes the hotplug behavior of kobjects in this kset. uevent, short for user events, is a mechanism for communicating with user-space information about the hotplugging and hot removal of devices from a system. */
};
=============================================================

* Kobjects are typically embedded in other data structures, giving those containing structures the features of the kobject. Ktypes is a set of shared operations. Ksets aggregate together related kobjects. In sysfs, kobjects are the individual directories in the filesystem; related directories, perhaps all subdirectories of a given directory might be in the same kset.

• Managing and manipulating kobjects:
The first step in using a kobject is declaring and initializing it. 
void kobject_init(struct kobject* kobj, struct kobj_type* ktype);
The 1st parameter is the kobject to be initialized. Before calling this function, the kobject must be zeroed, if not, a simple call to memset() does the trick:
=================================================
struct kobject* kobj;
kobj = kmalloc(sizeof(*kobj), GFP_KERNEL);
if(!kobj)
	return -ENOMEM;
memset(kobj, 0, sizeof(*kobj));
kobj->kset = my_kset;
kobject_init(kobj, my_ktype);
=================================================
The above steps is handled automatically by kobject_create():
struct kobject* kobject_create(void);

• Reference counts:
After initialization the kobject's refcnt is 1. Declared in <linux/kobject.h>:
struct kobject* kobject_get(struct kobject* kobj);
Increase the kobject's refcnt by 1, return NULL on failure.
void kobject_put(struct kobject* kobj);
Decrease the kobject's refcnt by 1, and if its refcnt becomes 0, the release function pointed at by the ktype associated with the kobject is invoked.

* Krefs:
Internally the kobject reference count is provided by the kref structure, which is declared in <linux/kref.h>:
===========================
struct kref{
	atomic_t refcount;
};
==========================
A structure is used simply to provide type checking.
void kref_init(struct kref* kref);
void kref_get(struct kref* kref);
int kref_put(struct kref* kref, void (*release)(struct kref* kref));
All the above functions are defined in lib/kref.c, and declared in <linux/kref.h>.


4. Sysfs:
The sysfs filesystem is an in-memory virtual filesystem that provides a view of the kobject hierarchy. It enables users to view the device topology of their system as a simple filesystem. Using attributes, kobjects can export files that enable kernel variables to be read from and optionally written to.
Today every system with a 2.6 kernel has sysfs, and most systems mount it at /sys/.
The root of sysfs contain at least 10 directories: block/, bus/, class/, dev/, devices/, firmware/, fs/, kernel/, module/, and power/.
block/:     contains one directory for each of the registered block devices. Each of those directories, in turn, contains any partitions on the block device.
bus/:       provides a view of system buses.
class/:     contains a view of the devices on the system organized by high-level function. 
dev/:       A view of registered device nodes.
devices/:   A view of the device topology of the system. It maps directly to the hierarchy of device structures inside the kernel.
firmware/:  contains a system-specific tree of low-level subsystems such as ACPI, EFI, etc.
fs/:        contains a view of registered filesystems.
kernel/:    contains kernel configuration options and status information.
modules/:   contains a view of the system's loaded modules.
power/:     contains systemwide power management data.

The most important directory is devices/, the directory structure is the actual device topology of the system. Much of the data in other directories is simply alternative organizations of the data in the devices/ directory.
Seeing the interconnection between the high-level concepts in class/ V.S. the low-level physical devices in devices/ and the actual drivers in bus/ is informative.

• Adding and removing kobjects from sysfs:
Initialized kobjects are not automatically exported to sysfs. To represent a kobject to sysfs, you use kobject_add():
	int kobject_add(struct kobject* kobj, struct kobject* parent, const char* fmt, ...);
The given kobject's location in sysfs depends on kobject's location in hierarchy. 
i)   If the kobject's parent pointer is set, the kobject maps to a subdirectory in sysfs inside its parent. 
ii)  If the parent pointer is not set, the kobject maps to a subdirectory inside kset->kobj. 
iii) if neither the parent nor the kset fields are set in the given kobject, the kobject is assumed to have no parent, and thus mapping to a root-level directory in sysfs.
* Regardless, the name of the directory representing the kobject in sysfs is given by fmt, which accepts a printf-style format string.
* Note, no "ADD" uevent will be created with this call, the caller should set up all of the necessary sysfs files for the object and then call kobject_uevent() with the UEVENT_ADD parameter to ensure that userspace is properly notified of this kobject's creation.

The helper function kobject_create_and_add() combines the work of kobject_create() and kobject_add():
	struct kobject* kobject_create_and_add(const char* name, struct kobjct* parent);
Note that kobject_create_and_add() receives the name of the kobject's directory as a normal string, while kobject_add() uses a printf-style string.
• Removing a kobject's sysfs representation is done via kobject_del():
	void kobject_del(struct kobject* kobj);
All of these functions are defined in lib/kobject.c, and declared in <linux/kobject.h>.

• Adding files to sysfs:
i)   Default attributes:
A default set of files in sysfs is provided via the ktype field in kobjects and ksets. The kobj_type structure contains a member, default_attrs, that is is an array of attribute structures. Attributes maps kernel data to files in sysfs. The attribute structure is defined in <linux/sysfs.h>:
=============================================================
struct attribute{
	const char* name;        /* attribute's name, which will be the filename of the resulting file in sysfs */
	struct module* owner;    /* owning module, if any */
	mode_t mode;             /* permission for the file in sysfs, all files and directories in sysfs are owned by uid 0 and gid 0. */
};
=============================================================
The sysfs_ops describes how to use the attributes. Defined in <linux/sysfs.h>:
=============================================================
struct sysfs_ops{
	/* method invoked on read of a sysfs file */
	ssize_t (*show)(struct kobject* kobj, struct attribute* attr, char* buffer);
	/* method invoked on write of a sysfs file */
	ssize_t (*store)(struct kobject* kobj, struct attribute* attr, const char* buffer, size_t size);
};
=============================================================
The show() method is invoked when the sysfs entry is read from user-space. It must copy the value of the attribute given by attr into the buffer provided by buffer. The buffer is PAGE_SIZE bytes in length. It returns the size in bytes of data actually written to buffer on success, otherwise, a negative error code on failure.
The store() method is invoked on write. It must read @size bytes from @buffer into the variable represented by the attribute attr. The size of buffer is always PAGE_SIZE or smaller. It returns the size in bytes of data read from buffer on success.

• Creating new attributes:
	int sysfs_create_file(struct kobject* kobj, const struct attribute* attr);
Before it's invoked, the given attribute should be filled out. It returns zero on success. Note that the sysfs_ops specified in the kobject's ktype is invoked to handle this new attribute.
It is also possible to create symbolic links:
	int sysfs_create_link(struct kobject* kobj, struct kobject* target, char* name);
This function creates a link named name in the directory mapped from kobj to the directory mapped from target.

• Destroying attributes:
	void sysfs_remove_file(struct kobject* kobj, const struct attribute* attr);
Upon the call return, the given attribute no longer appears in the given kobject's directory.
Symbolic links created with sysfs_create_link() could be removed with:
	void sysfs_remove_link(struct kobject* kobj, const char* name);
All of the above four funcitons are declared in <linux/kobject.h>. sysfs_create_file() and sysfs_remove_file() are defined in fs/sysfs/file.c. The sysfs_create_link() and sysfs_remove_link() are define in fs/sysfs/symlink.c.

• Sysfs conventions:
i)  Sysfs attributes should export one value per file. Values should be text-based and map to simple C types. In situations where the one-value-per-file rule results in an ineffiecient representation of data, it is acceptable to place multiple values of the same type in one file. Think of sysfs attributes as mapping to individual kernel vaiables, and keep in mind ease of manipulation from user-space, particularly from the shell.
ii) Remember that sysfs provides a kernel-to-user service and is thus a sort of user-space API. User-space programs could rely on the existence, location, value, and behavior of sysfs directory and files.

• The kernel events layer:
The kernel events layer implements a kernel-to-user notification system on top of kobjects. After the release of 2.6.0, it became clear that a mechanism for pushing events out of the kernel and up into user-space was needed, particularly for desktop systems. The kernel event layer models events as signals emitting from objects - specifically, kobjects. 
Each event is given a verb or action string representing the signal. The strings are terms such as modified or unmounted that describe what happened.
Finally, each event has an optional payload. Rather than pass an arbitrary string to user-space that provides the payload, the kernel event layer represents payload as sysfs attributes.
* Internally, the kernel events go from kernel-space out to user-space via netlink, which is a high-speed multicast socket that transmits networking information. Using netlink means that obtaining kernel events from user-space is as simple as blocking on a socket. The intention is for user-space to implement a system daemon that listens on the socket, processes any read events, and transmits the events up the system stack.
* To send events out to user-space from your kernel code, use:
	int kobject_uevent(struct kobject* kobj, enum kobject_action action);
The 1st parameter specifies the kobject emitting this signal. The actual kernel event contains the sysfs path to which this kobject contains.
The 2nd parameter specifies the action or verb describing this signal. The actual kernel event contains a string that maps to the provided enum kobject_action value. The enumerations are defined in <linux/kobject.h> and have the form KOBJ_foo. Current values include KOBJ_MOVE, KOBJ_ONLINE, KOBJ_OFFLINE, KOBJ_ADD, KOBJ_REMOVE, and KOBJ_CHANGE. These values map to the strings "move", "online", "offline", "add", "remove", and "change", respectively. Adding new action values is acceptable, so long as existing values are insufficient.
These related functions are defined in lib/kobject_uevent.c and declared in <linux/kobject.h>.
